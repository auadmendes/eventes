// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  //provider = "sqlite" /// for SQlLite
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type UsefulLink {
  title String
  url   String
}

// model User {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   clerkId   String   @unique
//   email     String   @unique
//   name      String?
//   image     String?
//   isAdmin   Boolean  @default(false) // ðŸ‘ˆ add default so new users arenâ€™t admins
//   city      String?
//   bio       String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("users")
// }

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String   @unique
  email     String   @unique
  name      String?
  image     String?
  isAdmin   Boolean  @default(false)
  city      String?
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  services Service[] @relation("UserServices") // ðŸ‘ˆ add this

  @@map("users")
}

model Event {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  link        String
  title       String
  date        String
  UF          String?
  category    String
  end_date    String?
  font        String
  highlighted Boolean?
  image       String
  description String?
  location    String?
  distances   String?
  extra       String[]
  links       UsefulLink[]

  likes Like[] @relation("EventLikes")

  @@map("events")
}

model Like {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  user_id  String
  event_id String

  event Event @relation("EventLikes", fields: [event_id], references: [id])

  @@map("likes")
}

model Place {
  id                    String       @id @default(auto()) @map("_id") @db.ObjectId
  place_name            String
  short_description     String
  description           String?
  city                  String
  neighborhood          String?
  address               String?
  location              String? // can store as "lat,lng" or GeoJSON string
  image                 String?
  gallery_images        String[] // array of URLs
  link                  String?
  category              String?
  phone_number          String?
  email                 String?
  opening_hours         String? // free-text or JSON string
  price_range           String? // e.g., $, $$, $$$
  ticket_required       Boolean?     @default(false)
  ticket_link           String?
  wheelchair_accessible Boolean?     @default(false)
  parking               String?
  pet_friendly          Boolean?     @default(false)
  rating                Float?       @default(0)
  reviews_count         Int?         @default(0)
  tags                  String[] // array of keywords
  instagram             String?
  facebook              String?
  tripadvisor           String?
  best_time_to_visit    String?
  nearby_places         String[] // array of Place IDs for recommendations
  links                 UsefulLink[]

  date_created DateTime @default(now())
  last_updated DateTime @updatedAt
  published    Boolean  @default(true)
  created_by   String? // optional admin/user ID

  @@map("places")
}

model City {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String         @unique
  neighborhoods Neighborhood[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Neighborhood {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  city      City     @relation(fields: [cityId], references: [id])
  cityId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Relations
  user   User   @relation("UserServices", fields: [userId], references: [id])
  userId String @db.ObjectId

  city         String
  neighborhood String

  // Basic info
  title       String
  description String
  services    String[] // e.g. ["Plumbing", "Painting"]
  mainService String
  phone       String?
  showPhone   Boolean      @default(true)
  email       String
  image       String
  links       UsefulLink[]

  // Socials
  instagram String?
  facebook  String?
  website   String?
  whatsapp  String?

  // Moderation
  isValidated Boolean   @default(false)
  validatedAt DateTime?
  validatedBy String?

  // Ratings
  ratingAvg   Float @default(0)
  ratingCount Int   @default(0)

  // Extra
  images    String[]
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services")
}
